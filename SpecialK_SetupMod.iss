; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

;#define TBFix
#define UnX
;#define Replicant

#define SpecialKName      "Special K"
#define SpecialKPublisher "The Special K Group"
#define SpecialKURL       "https://special-k.info/"
#define SpecialKForum     "https://discourse.differentk.fyi/"
#define SpecialKDiscord   "https://discord.gg/specialk"
#define SpecialKPatreon   "https://www.patreon.com/Kaldaien"
#define RedistDir         "Redistributables"              ; Required dependencies and PowerShell helper scripts   
#define OutputDir         "Builds_Mods"                   ; Output folder to put compiled builds of the installer   
#define AssetsDir         "Assets"                        ; LICENSE.txt, icon.ico, WizardImageFile.bmp, and WizardSmallImageFile.bmp

#if Defined TBFix ; Tales of Berseria
  #define SourceDir         "Source_TBFix"
  #define SteamAppID        "429660"
  #define SpecialKUninstID  "{{EBE9243D-5ADC-48F2-9716-65F75A4EE203}"
  #define SpecialKGameName  "Tales of Berseria"
  #define SpecialKModName   "TBFix"
  #define SpecialKVersion   GetStringFileInfo(SourceDir + '\tbfix.dll', "ProductVersion")
  #define SpecialKHelpURL   "https://wiki.special-k.info/SpecialK/Custom/TBFix"
#elif Defined UnX ; Final Fantasy X|X-2 HD Remaster
  #define SourceDir         "Source_UnX"
  #define SteamAppID        "359870"
  #define SpecialKUninstID  "{{0BD6E499-367A-4B80-B38A-DE55B029599F}"
  #define SpecialKGameName  "Final Fantasy X|X-2 HD Remaster"
  #define SpecialKModName   "UnX"
  #define SpecialKVersion   GetStringFileInfo(SourceDir + '\unx.dll', "ProductVersion")
  #define SpecialKHelpURL   "https://wiki.special-k.info/SpecialK/Custom/UnX"
#elif Defined Replicant ; NieR: Replicant
  #define SourceDir         "Source_Replicant"
  #define SteamAppID        "1113560"
  #define SpecialKUninstID  "{{F11AD53F-5B59-48F6-A550-64E554497FFE}"
  #define SpecialKGameName  "NieR: Replicant"
  #define SpecialKModName   "Radical Replicant"
  #define SpecialKVersion   GetStringFileInfo(SourceDir + '\dxgi.dll', "ProductVersion")
  #define SpecialKHelpURL   "https://wiki.special-k.info/SpecialK/Custom/Replicant"
#else
  #define SourceDir         "Source"                        ; Keeps the files and folder structure of the install folder as intended post-install
  ;#define SteamAppID        ""
  ;#define SpecialKGameName  ""
  ;#define SpecialKModName   ""
  #define SpecialKVersion   GetStringFileInfo(SourceDir + '\d3d9.dll', "ProductVersion")
  #define SpecialKHelpURL   "https://wiki.special-k.info/"
#endif

#define SpecialKileName  StringChange("SpecialK " + SpecialKModName + " " + SpecialKVersion, " ", "_")

#define public Dependency_NoExampleSetup
#include "CodeDependencies.iss"


[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
ArchitecturesInstallIn64BitMode    = x64
ArchitecturesAllowed               = x86 x64
MinVersion                         = 6.3.9600
AppId                              = {#SpecialKUninstID}
AppName                            = {#SpecialKName} ({#SpecialKModName}) for {#SpecialKGameName}
AppVersion                         = {#SpecialKVersion}  
AppVerName                         = {#SpecialKName} ({#SpecialKModName}) for {#SpecialKGameName}
AppPublisher                       = {#SpecialKPublisher}
AppPublisherURL                    = {#SpecialKURL}
AppSupportURL                      = {#SpecialKHelpURL}
AppUpdatesURL                      = 
AppCopyright                       = Copyleft 🄯 2015-2022
VersionInfoVersion                 = {#SpecialKVersion}
VersionInfoOriginalFileName        = {#SpecialKileName}.exe
VersionInfoCompany                 = {#SpecialKPublisher}
DefaultDirName                     = {code:GetSteamInstallFolder|{#SteamAppID}}
DirExistsWarning                   = no
UsePreviousAppDir                  = no
DisableDirPage                     = no
DefaultGroupName                   = {#SpecialKName}
DisableProgramGroupPage            = yes
LicenseFile                        = {#AssetsDir}\LICENSE.txt
PrivilegesRequired                 = lowest
PrivilegesRequiredOverridesAllowed = commandline
OutputDir                          = {#OutputDir}
OutputBaseFilename                 = {#SpecialKileName}
SetupIconFile                      = {#AssetsDir}\icon.ico
Compression                        = lzma2/ultra64
SolidCompression                   = yes
LZMAUseSeparateProcess             = yes
WizardStyle                        = modern
WizardSmallImageFile               = {#AssetsDir}\WizardSmallImageFile.bmp
WizardImageFile                    = {#AssetsDir}\WizardImageFile.bmp
UninstallFilesDir                  = {app}\Version\
UninstallDisplayIcon               = {app}\Version\unins000.exe
CloseApplications                  = yes
DisableWelcomePage                 = no
SetupLogging                       = yes


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"


[Messages]
SetupAppTitle    ={#SpecialKName} Setup
SetupWindowTitle ={#SpecialKName} ({#SpecialKModName}) v {#SpecialKVersion} for {#SpecialKGameName}
UninstallAppTitle={#SpecialKName} Uninstall
WelcomeLabel2    =This will install {#SpecialKName} ({#SpecialKModName}) v {#SpecialKVersion} for {#SpecialKGameName} on your computer.%n%nLovingly referred to as the Swiss Army Knife of PC gaming, Special K does a bit of everything. It is best known for fixing and enhancing graphics, its many detailed performance analysis and correction mods, and a constantly growing palette of tools that solve a wide variety of issues affecting PC games.%n%nIt is recommended that you close all other applications before continuing.
ConfirmUninstall =Are you sure you want to completely remove %1 and all of its components?%n%nThis will also remove any Special K ({#SpecialKModName}) game data (screenshots, texture packs, configs).  
DiskSpaceMBLabel =

[Code]
var
  WbemLocator       : Variant;
  WbemServices      : Variant;
  OneDriveStopped   : Boolean;
  MusicPlayback     : Boolean;
  ToggleMusicButton : TNewButton;
  CreditMusicButton : TNewButton;
  OneDrivePath      : String;
  LocPLUGroupName   : String;
  LocINTUserName    : String;

// If Inno Setup ever becomes native 64-bit, the below rows needs to be changed to SetWindowLongPtrW/GetWindowLongPtrW
function SetWindowLong ( Wnd: HWND;  nIndex: Integer;  dwNewLong: Longint): Longint;  external 'SetWindowLongW@user32.dll stdcall';
function GetWindowLong ( Wnd: HWND;  nIndex: Integer)                     : Longint;  external 'GetWindowLongW@user32.dll stdcall';
//function SetWindowLongPtr (Wnd : HWND;  nIndex: Integer;  dwNewLong: Longint): Longint;  external 'SetWindowLongPtrW@user32.dll stdcall';
//function GetWindowLongPtr (Wnd : HWND;  nIndex: Integer)                     : Longint;  external 'GetWindowLongPtrW@user32.dll stdcall';
function GetWindow     (hWnd: HWND;    uCmd: Cardinal)                    : HWND;     external 'GetWindow@user32.dll stdcall'; 

// Used to play background music during installation
function mciSendString(lpstrCommand: String; lpstrReturnString: Integer; uReturnLength: Cardinal; hWndCallback: HWND): Cardinal; external 'mciSendStringW@winmm.dll stdcall';

// Used to check for the presence of cmd line switches
function SwitchHasValue(Name: string; Value: string; DefaultValue: string): Boolean;
begin
  Result := CompareText(ExpandConstant('{param:' + Name + '|' + DefaultValue + '}'), Value) = 0;
end;


// Parses Valve Data Format (.VDF and .ACF) files
// Based on StackOverflow: https://stackoverflow.com/a/37019690/15133327
// Created by: https://stackoverflow.com/users/850848/martin-prikryl
// Licensed under CC BY-SA 3.0, https://creativecommons.org/licenses/by-sa/3.0/
function GetVDFKeyValues(FileName: String; Key: String; var Values: TArrayOfString): Boolean;
var
  I:                Integer;
  P:                Integer;
  Lines:            TArrayOfString;
  Line:             String;
  LineKey:          String;
  LineValue:        String;
  Count:            Integer;
begin
  Result := LoadStringsFromFile(FileName, Lines);
  Count  := 0;

  for I := 0 to GetArrayLength(Lines) - 1 do
  begin
    Line := Trim(Lines[I]);
    if Copy(Line, 1, 1) = '"' then
    begin
      Delete(Line, 1, 1);
      P := Pos('"', Line);
      if P > 0 then
      begin
        LineKey := Trim(Copy(Line, 1, P - 1));
        Delete(Line, 1, P);
        Line := Trim(Line);
        //Log(Format('Found VDF key "%s"', [LineKey]));

        if (CompareText(
              Copy(LineKey, 1, Length(Key)),
              Key) = 0) and
           (Line[1] = '"') then
        begin
          Delete(Line, 1, 1);
          P := Pos('"', Line);
          if P > 0 then
          begin
            LineValue := Trim(Copy(Line, 1, P - 1));
            StringChange(LineValue, '\\', '\');
            //Log(Format('Found VDF value: %s', [LineValue]));
            Inc(Count);
            SetArrayLength(Values, Count);
            Values[Count - 1] := LineValue;
          end;
        end;
      end;
    end;
  end;
end;


// Parses Valve Data Format (.VDF and .ACF) files
// Based on StackOverflow: https://stackoverflow.com/a/37019690/15133327
// Created by: https://stackoverflow.com/users/850848/martin-prikryl
// Licensed under CC BY-SA 3.0, https://creativecommons.org/licenses/by-sa/3.0/
function GetVDFKeyValue(FileName: String; Key: String; var Value: String): Boolean;
var
  I:                Integer;
  P:                Integer;
  Lines:            TArrayOfString;
  Line:             String;
  LineKey:          String;
  LineValue:        String;
  Count:            Integer;
begin
  Result := LoadStringsFromFile(FileName, Lines);
  Count  := 0;

  for I := 0 to GetArrayLength(Lines) - 1 do
  begin
    Line := Trim(Lines[I]);
    if Copy(Line, 1, 1) = '"' then
    begin
      Delete(Line, 1, 1);
      P := Pos('"', Line);
      if P > 0 then
      begin
        LineKey := Trim(Copy(Line, 1, P - 1));
        Delete(Line, 1, P);
        Line := Trim(Line);
        //Log(Format('Found VDF key "%s"', [LineKey]));

        if (CompareText(
              Copy(LineKey, 1, Length(Key)),
              Key) = 0) and
           (Line[1] = '"') then
        begin
          Delete(Line, 1, 1);
          P := Pos('"', Line);
          if P > 0 then
          begin
            LineValue := Trim(Copy(Line, 1, P - 1));
            StringChange(LineValue, '\\', '\');
            //Log(Format('Found VDF value: %s', [LineValue]));
            Value := LineValue;
          end;
        end;
      end;
    end;
  end;
end;


// This is called from [Setup] section to dynamically set the default installation folder
function GetSteamInstallFolder(AppID: String): String;
var
  I:                Integer;
  P:                Integer;
  Libraries:        TArrayOfString;
  Library:          String;
  SteamInstallPath: String;
  GameInstallDir:   String;
begin
  SteamInstallPath := ExpandConstant('{reg:HKLM32\SOFTWARE\Valve\Steam,InstallPath|}');

  if Length(SteamInstallPath) > 0 then
  begin
    Log(Format('Found Steam folder: %s', [SteamInstallPath]));
    if GetVDFKeyValues(SteamInstallPath + '\config\libraryfolders.vdf', 'path', Libraries) then
    begin
      for I := 0 to GetArrayLength(Libraries) - 1 do
      begin
        Library := Libraries[I];
        if FileExists(Library + '/steamapps/appmanifest_' + AppID + '.acf') and
           GetVDFKeyValue(Library + '/steamapps/appmanifest_' + AppID + '.acf', 'installdir', GameInstallDir) then
        begin
          Result := Library + '/steamapps/common/' + GameInstallDir;
        end;
      end;
    end;
  end; 

end;  


// Checks if the required permissions exists for PresentMon stats
function IsInteractiveInPLU(): Boolean;
var
  WbemObjectSet : Variant;
  IsMember      : Boolean;
  ComputerName  : String;
  I             : Integer;      
begin
  try
    (*
      PS C:\> Get-WmiObject -Query "SELECT * FROM Win32_Group WHERE (LocalAccount = True) AND (SID = 'S-1-5-32-559')" | fl

      Caption : <ComputerName>\Performance Log Users
      Domain  : <ComputerName>
      Name    : Performance Log Users
      SID     : S-1-5-32-559

      PS C:\> Get-WMIObject -Query 'ASSOCIATORS OF {Win32_Group.Domain="<ComputerName>",Name="Performance Log Users"} WHERE assocClass=Win32_GroupUser Role=GroupComponent ResultRole=PartComponent' | fl

      Caption : <ComputerName>\INTERACTIVE
      Domain  : <ComputerName>
      Name    : INTERACTIVE
      SID     : S-1-5-4
    *)

    // Retrieve the localized name of the PLU group  
    WbemObjectSet      := WbemServices.ExecQuery('SELECT * FROM Win32_Group WHERE (LocalAccount = True) AND (SID = "S-1-5-32-559")');

    if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
    begin
      ComputerName    := WbemObjectSet.ItemIndex(0).Domain;
      LocPLUGroupName := WbemObjectSet.ItemIndex(0).Name;
      
      //MsgBox(ComputerName,    mbInformation, MB_OK);
      //MsgBox(LocPLUGroupName, mbInformation, MB_OK);

      if not VarIsNull(ComputerName) and not VarIsNull(LocPLUGroupName) then
      begin
        WbemObjectSet := Null;

        // Retrieve members of the local PLU group
        WbemObjectSet := WbemServices.ExecQuery('ASSOCIATORS OF {Win32_Group.Domain="' + ComputerName + '",Name="' + LocPLUGroupName + '"} WHERE assocClass=Win32_GroupUser Role=GroupComponent ResultRole=PartComponent');
        if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
        begin
          for I := 0 to WbemObjectSet.Count - 1 do
          begin
            // Check if one of the members is NT AUTHORITY\Interactive 
            if (WbemObjectSet.ItemIndex(I).SID = 'S-1-5-4') then
            begin
              IsMember := True;
            end;
          end;
        end;
      end;

      // If Interactive was not a member, we still need to retrieve the localized username
      if not IsMember then
      begin
        WbemObjectSet := Null;
          
        WbemObjectSet      := WbemServices.ExecQuery('SELECT * FROM Win32_SystemAccount WHERE (LocalAccount = True) AND (SID = "S-1-5-4")');
        if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
        begin
          LocINTUserName := WbemObjectSet.ItemIndex(0).Name;
        end;
      end;

      Result := IsMember;
    end;

  except 
    Log('Catastrophic error in IsInteractiveInPLU() !');
    // Surpresses exception when an issue prevents proper lookup
  end;
end;


// Dependency handler
function InitializeSetup: Boolean;
var
    Paths: TArrayOfString;
begin
  Log('Initializing Setup.');

  Log('Required dependencies:');

  // DirectX End-User Runtime
  //Dependency_AddDirectX;
  // Not required any longer following the removal of CEGUI
  
  // 32-bit Visual C++ 2015-2022 Redistributable
  try
    Log('+ 32-bit Visual C++ 2015-2022 Redistributable');
    Dependency_ForceX86 := True;
    Dependency_AddVC2015To2022;
    Dependency_ForceX86 := False;
  except 
    Log('Catastrophic error in InitializeSetup() for 32-bit Visual C++ 2015-2022 Redistributable!');
    // Surpresses exception when an issue prevents proper lookup
  end;
      
  // 64-bit Visual C++ 2015-2022 Redistributable
  if IsWin64 then
  begin
    try
      Log('+ 64-bit Visual C++ 2015-2022 Redistributable');
      Dependency_AddVC2015To2022;
    except 
      Log('Catastrophic error in InitializeSetup() for 64-bit Visual C++ 2015-2022 Redistributable!');
      // Surpresses exception when an issue prevents proper lookup
    end;
  end;

  Result := True;
end;


procedure ToggleButtonClick(Sender: TObject);
begin
  if MusicPlayback then
  begin
    mciSendString('stop soundbg', 0, 0, 0);
    MusicPlayback := false;
    ToggleMusicButton.Caption := 'Play Music';
  end
  else
  begin
    mciSendString('play soundbg repeat', 0, 0, 0);
    MusicPlayback := true;
    ToggleMusicButton.Caption := 'Stop Music';
  end;
end;


procedure CreditButtonClick(Sender: TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('', 'https://opengameart.org/content/stargazer', '', '', SW_SHOW, ewNoWait, ErrorCode);
end;  


procedure InitializeWizard();
begin 
  Log('Initializing Wizard.');

  // Fixes Inno Setup no taskbar preview
  // From StackOverflow: https://stackoverflow.com/a/64162597/15133327
  // Created by: https://stackoverflow.com/users/709507/inside-man
  // Licensed under CC BY-SA 4.0, https://creativecommons.org/licenses/by-sa/4.0/
  //
  // Technically wrong: "You must not call SetWindowLong with the GWL_HWNDPARENT index to change the parent of a child window.
  //                     Instead, use the SetParent function." 
  Log('Fixing the no taskbar preview bug of Inno Setup.');
  SetWindowLong(WizardForm.Handle, -8, GetWindowLong(GetWindow(WizardForm.Handle, 4), -8));

  // Have the disk spacel label appear here instead of later
  WizardForm.DiskSpaceLabel.Parent := PageFromID(wpWelcome).Surface;

  if not WizardSilent() then
  begin 
    Log('Preparing music components.');
    // Some nice background tunes
    MusicPlayback := false;
    ExtractTemporaryFile('techno_stargazev2.1loop.mp3');
    mciSendString(ExpandConstant('open "{tmp}/techno_stargazev2.1loop.mp3" alias soundbg'), 0, 0, 0);
    //mciSendString('play soundbg repeat', 0, 0, 0);
    mciSendString('setaudio soundbg volume to 125', 0, 0, 0);

    ToggleMusicButton         := TNewButton.Create(WizardForm);
    ToggleMusicButton.Parent  := WizardForm;
    ToggleMusicButton.Left    :=
      WizardForm.ClientWidth -
      WizardForm.CancelButton.Left - 
      WizardForm.CancelButton.Width;
    ToggleMusicButton.Top     := WizardForm.CancelButton.Top; //WizardForm.CancelButton.Top + 50;
    ToggleMusicButton.Width   := WizardForm.CancelButton.Width;
    ToggleMusicButton.Height  := WizardForm.CancelButton.Height;
    ToggleMusicButton.Caption := 'Play Music';
    ToggleMusicButton.OnClick := @ToggleButtonClick;
    ToggleMusicButton.Anchors := [akLeft, akBottom];

    CreditMusicButton         := TNewButton.Create(WizardForm);
    CreditMusicButton.Parent  := WizardForm;
    CreditMusicButton.Left    :=
      WizardForm.ClientWidth -
      WizardForm.NextButton.Left -
      WizardForm.NextButton.Width;
    CreditMusicButton.Top     := WizardForm.NextButton.Top; //WizardForm.CancelButton.Top + 50;
    CreditMusicButton.Width   := WizardForm.NextButton.Width;
    CreditMusicButton.Height  := WizardForm.NextButton.Height;
    CreditMusicButton.Caption := 'Music By';
    CreditMusicButton.OnClick := @CreditButtonClick;
    CreditMusicButton.Anchors := [akLeft, akBottom];
  end;
end;


procedure DeinitializeSetup();
begin
  if not WizardSilent() then
  begin 
    Log('Cleaning up music components.');
    if MusicPlayback then
    begin
      // Stop music playback if it's currently playing
      mciSendString(ExpandConstant('stop soundbg'), 0, 0, 0);
      MusicPlayback := false;
    end;
    // Close the MCI device
    mciSendString(ExpandConstant('close all'), 0, 0, 0);
  end;
end;


procedure CurPageChanged(CurPageID: Integer);
var
  AdditionalTasks : String;
begin
  if CurPageID = wpReady then
  begin 
    Log('Initializing Ready Page.');

    Wizardform.ReadyMemo.Font.Name := 'Consolas';

    // CodeDependencies.iss adds the additional tasks to the ReadyMemo before this code executes,
    //   so make a copy of the current text, then clear the lines.
    AdditionalTasks := Wizardform.ReadyMemo.Text;
    Wizardform.ReadyMemo.Lines.Clear();

    // Let's add our custom lines
    Wizardform.ReadyMemo.Lines.Add('');
    Wizardform.ReadyMemo.Lines.Add('Components to install:');
    Wizardform.ReadyMemo.Lines.Add('      Special K ({#SpecialKModName}) v {#SpecialKVersion} for {#SpecialKGameName}');
    Wizardform.ReadyMemo.Lines.Add('');

    // And finally if there is any additional tasks from Inno Setup or CodeDependencies.iss, add them back.
    Wizardform.ReadyMemo.Lines.Add(AdditionalTasks); 

    Wizardform.ReadyMemo.Show;
  end;
end;                


function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  WasVisible       : Boolean;
  ResultCode       : Integer;

begin 
  Log('Preparing Install.');

  WasVisible   := WizardForm.PreparingLabel.Visible;
  Result       := '';
  ResultCode   := 0;

  try 
    Log('Establishing WMI connection...'); 
    WbemLocator   := CreateOleObject('WbemScripting.SWbemLocator');
    WbemServices  := WbemLocator.ConnectServer('localhost', 'root\CIMV2');

    WizardForm.PreparingLabel.Visible := True;
    WizardForm.PreparingLabel.Caption := '';
    Wizardform.NextButton.Visible := False;
    Wizardform.NextButton.Enabled := False;
    Wizardform.BackButton.Visible := False;
    Wizardform.BackButton.Enabled := False;

    if not WizardSilent() then
    begin
      // Check if NT AUTHORITY\INTERACTIVE is in BUILTIN\Performance Log Users and if not, make it so
      WizardForm.PreparingLabel.Caption := 'Checking membership in the local ''Performance Log Users'' group...';
      Log('Checking membership in the local ''Performance Log Users'' group.');

      if not IsInteractiveInPLU() then
      begin
        WizardForm.PreparingLabel.Caption := 'Attempting to grant membership in the local ''Performance Log Users'' group...';
        Log('Launching ''net'' elevated to add user (' + LocINTUserName + ') to the group (' + LocPLUGroupName + ').');
        ShellExec('RunAs', 'net', 'localgroup "' + LocPLUGroupName + '" "' + LocINTUserName + '" /add', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);

        Sleep(500);

        if ResultCode <> 0 then
        begin
          Log('Failed to grant permission : ' + IntToStr(ResultCode) + ', ' + SysErrorMessage(ResultCode));
        end;      
      end;

      ResultCode   := 0;
    end;
  
  except 
    Log('Catastrophic error in PrepareToInstall()!');
    // Surpresses exception when task does not exist or another issue prevents proper lookup
  finally
    WizardForm.PreparingLabel.Visible := WasVisible;
  end;
end;



[InstallDelete]
Type: files;          Name: "{app}\Version\unins00*"



[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

; NOTE: When solid compression is enabled, be sure to list your temporary files at (or near) the top of the [Files] section.
; In order to extract an arbitrary file in a solid-compressed installation, Setup must first decompress all prior files (to a temporary buffer in memory).
; This can result in a substantial delay if a number of other files are listed above the specified file in the [Files] section.

; Temporary files that are extracted as needed
Source: "{#AssetsDir}\techno_stargazev2.1loop.mp3";  DestDir: {tmp};            Flags: dontcopy;

; Main mod files should always be overwritten.
; NOTE: This line causes any files included above to be counted twice in DiskSpaceMBLabel
Source: "{#SourceDir}\*";                            DestDir: "{app}";          Flags: ignoreversion recursesubdirs createallsubdirs; 


; [Dirs]
; Name: "{app}";          Permissions: users-modify



[Run]
; Checked by default

Filename: "steam://run/{#SteamAppID}";              Description: "Launch game"; \
  Flags: shellexec nowait postinstall runasoriginaluser

Filename: "{#SpecialKHelpURL}";                     Description: "Open the wiki"; \
  Flags: shellexec nowait postinstall skipifsilent

; Unchecked by default

Filename: "{#SpecialKDiscord}";                     Description: "Join the Discord server"; \
  Flags: shellexec nowait postinstall skipifsilent unchecked

Filename: "{#SpecialKForum}";                       Description: "Visit the forum"; \
  Flags: shellexec nowait postinstall skipifsilent unchecked

Filename: "{#SpecialKPatreon}";                     Description: "Support the project on Patreon"; \
  Flags: shellexec nowait postinstall skipifsilent unchecked


[UninstallDelete]
Type: filesandordirs; Name: "{app}\CEGUI"
Type: filesandordirs; Name: "{app}\SK_Res"
Type: filesandordirs; Name: "{app}\Version" 
Type: filesandordirs; Name: "{app}\logs"

