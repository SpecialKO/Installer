; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!


#define SpecialKName      "Special K"
#define SpecialKPublisher "The Special K Group"
#define SpecialKURL       "https://special-k.info/"
#define SpecialKHelpURL   "https://wiki.special-k.info/"
#define SpecialKExeName   "SKIF.exe"
#define SourceDir         "Source"                        ; Keeps the files and folder structure of Documents\My Mods\SpecialK as intended post-install
#define RedistDir         "Redistributables"              ; Required dependencies and PowerShell helper scripts   
#define OutputDir         "Builds"                        ; Output folder to put compiled builds of the installer   
#define AssetsDir         "Assets"                        ; LICENSE.txt, icon.ico, WizardImageFile.bmp, and WizardSmallImageFile.bmp
#define SpecialKVersion   GetStringFileInfo(SourceDir + '\SpecialK64.dll', "ProductVersion") ; ProductVersion
#define SKIFVersion       GetStringFileInfo(SourceDir + '\SKIF.exe',       "ProductVersion")

#define public Dependency_NoExampleSetup
#include "CodeDependencies.iss"


[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
ArchitecturesInstallIn64BitMode    = x64
ArchitecturesAllowed               = x86 x64
MinVersion                         = 6.3.9600
AppId                              = {{F4A43527-9457-424A-90A6-17CF02ACF677}
AppName                            = {#SpecialKName}
AppVersion                         = {#SpecialKVersion}  
AppVerName                         = {#SpecialKName}
AppPublisher                       = {#SpecialKPublisher}
AppPublisherURL                    = {#SpecialKURL}
AppSupportURL                      = {#SpecialKHelpURL}
AppUpdatesURL                      = 
AppCopyright                       = Copyleft 🄯 2015-2020 
VersionInfoVersion                 = {#SpecialKVersion}
VersionInfoOriginalFileName        = SpecialK_{#SpecialKVersion}.exe
VersionInfoCompany                 = {#SpecialKPublisher}
DefaultDirName                     = {userdocs}\My Mods\SpecialK
DisableDirPage                     = yes
DefaultGroupName                   = {#SpecialKName}
DisableProgramGroupPage            = yes
LicenseFile                        = {#AssetsDir}\LICENSE.txt
PrivilegesRequired                 = lowest
PrivilegesRequiredOverridesAllowed = commandline
OutputDir                          = {#OutputDir}
OutputBaseFilename                 = SpecialK_{#SpecialKVersion}
SetupIconFile                      = {#AssetsDir}\icon.ico
Compression                        = lzma2/ultra64
SolidCompression                   = yes
WizardStyle                        = modern
WizardSmallImageFile               = {#AssetsDir}\WizardSmallImageFile.bmp
WizardImageFile                    = {#AssetsDir}\WizardImageFile.bmp
UninstallFilesDir                  = {app}\Servlet
UninstallDisplayIcon               = {app}\SKIF.exe
CloseApplications                  = yes
DisableWelcomePage                 = no
SetupLogging                       = yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"


[Messages]
SetupAppTitle    ={#SpecialKName} Setup
SetupWindowTitle ={#SpecialKName} v {#SpecialKVersion}
UninstallAppTitle={#SpecialKName} Uninstall
WelcomeLabel2    =This will install {#SpecialKName} v {#SpecialKVersion} on your computer.%n%nLovingly referred to as the Swiss Army Knife of PC gaming, Special K does a bit of everything. It is best known for fixing and enhancing graphics, its many detailed performance analysis and correction mods, and a constantly growing palette of tools that solve a wide variety of issues affecting PC games.%n%nIt is recommended that you close all other applications before continuing.
ConfirmUninstall =Are you sure you want to completely remove %1 and all of its components?%n%nThis will also remove any Special K game data (configs, texture packs) stored in Documents\My Mods\SpecialK\Profiles.  
DiskSpaceMBLabel =

[Code]
var
  WbemLocator       : Variant;
  WbemServices      : Variant;
  OneDriveStopped   : Boolean;
  MusicPlayback     : Boolean;
  ToggleMusicButton : TNewButton;
  CreditMusicButton : TNewButton;

function SetWindowLong (Wnd : HWnd;     Index: Integer;  NewLong: Longint): Longint;  external 'SetWindowLongW@user32.dll stdcall';
function GetWindowLong (Wnd : HWnd;     Index: Integer)                   : Longint;  external 'GetWindowLongW@user32.dll stdcall';
function GetWindow     (HWND: Longint;  uCmd : cardinal)                  : Longint;  external 'GetWindow@user32.dll stdcall'; 

// Used to play background music during installation
function mciSendString(lpstrCommand: String; lpstrReturnString: Integer; uReturnLength: Cardinal; hWndCallback: HWND): Cardinal; external 'mciSendStringW@winmm.dll stdcall';


// Dependency handler
function InitializeSetup: Boolean;
begin
  Log('Initializing Setup.');

  Log('Required dependencies:');

  // DirectX End-User Runtime    

  //Dependency_AddDirectX;
  // Not required any longer following the removal of CEGUI
  
  // 32-bit Visual C++ 2015-2022 Redistributable
  try
    Log('+ 32-bit Visual C++ 2015-2022 Redistributable');
    Dependency_ForceX86 := True;
    Dependency_AddVC2015To2022;
    Dependency_ForceX86 := False;
  except
    // Surpresses exception when an issue prevents proper lookup
  end;
      
  // 64-bit Visual C++ 2015-2022 Redistributable
  if IsWin64 then
  begin
    try
      Log('+ 64-bit Visual C++ 2015-2022 Redistributable');
      Dependency_AddVC2015To2022;
    except
      // Surpresses exception when an issue prevents proper lookup
    end;
  end;

  Result := True;
end;


procedure ToggleButtonClick(Sender: TObject);
begin
  if MusicPlayback then
  begin
    mciSendString('stop soundbg', 0, 0, 0);
    MusicPlayback := false;
    ToggleMusicButton.Caption := 'Play Music';
  end
  else
  begin
    mciSendString('play soundbg repeat', 0, 0, 0);
    MusicPlayback := true;
    ToggleMusicButton.Caption := 'Stop Music';
  end;
end;


procedure CreditButtonClick(Sender: TObject);
var
  ErrorCode: Integer;
begin
  ShellExec('', 'https://opengameart.org/content/stargazer', '', '', SW_SHOW, ewNoWait, ErrorCode);
end;  


procedure InitializeWizard();
begin 
  Log('Initializing Wizard.');

  // Fixes Inno Setup no taskbar preview
  // From: https://stackoverflow.com/questions/64060208/inno-setup-window-preview-in-taskbar
  // 
  // Technically wrong: "You must not call SetWindowLong with the GWL_HWNDPARENT index to change the parent of a child window.
  //                     Instead, use the SetParent function."
  SetWindowLong(WizardForm.Handle, -8, GetWindowLong(GetWindow(WizardForm.Handle, 4), -8));
  WizardForm.DiskSpaceLabel.Parent := PageFromID(wpWelcome).Surface;

  if not WizardSilent() then
  begin 
    Log('Preparing music components.');
    // Some nice background tunes
    MusicPlayback := false;
    ExtractTemporaryFile('techno_stargazev2.1loop.mp3');
    mciSendString(ExpandConstant('open "{tmp}/techno_stargazev2.1loop.mp3" alias soundbg'), 0, 0, 0);
    //mciSendString('play soundbg repeat', 0, 0, 0);
    mciSendString('setaudio soundbg volume to 125', 0, 0, 0);

    ToggleMusicButton         := TNewButton.Create(WizardForm);
    ToggleMusicButton.Parent  := WizardForm;
    ToggleMusicButton.Left    :=
      WizardForm.ClientWidth -
      WizardForm.CancelButton.Left - 
      WizardForm.CancelButton.Width;
    ToggleMusicButton.Top     := WizardForm.CancelButton.Top; //WizardForm.CancelButton.Top + 50;
    ToggleMusicButton.Width   := WizardForm.CancelButton.Width;
    ToggleMusicButton.Height  := WizardForm.CancelButton.Height;
    ToggleMusicButton.Caption := 'Play Music';
    ToggleMusicButton.OnClick := @ToggleButtonClick;
    ToggleMusicButton.Anchors := [akLeft, akBottom];

    CreditMusicButton         := TNewButton.Create(WizardForm);
    CreditMusicButton.Parent  := WizardForm;
    CreditMusicButton.Left    :=
      WizardForm.ClientWidth -
      WizardForm.NextButton.Left -
      WizardForm.NextButton.Width;
    CreditMusicButton.Top     := WizardForm.NextButton.Top; //WizardForm.CancelButton.Top + 50;
    CreditMusicButton.Width   := WizardForm.NextButton.Width;
    CreditMusicButton.Height  := WizardForm.NextButton.Height;
    CreditMusicButton.Caption := 'Music By';
    CreditMusicButton.OnClick := @CreditButtonClick;
    CreditMusicButton.Anchors := [akLeft, akBottom];
  end;
end;


procedure DeinitializeSetup();
begin
  if not WizardSilent() then
  begin 
    Log('Cleaning up music components.');
    if MusicPlayback then
    begin
      // Stop music playback if it's currently playing
      mciSendString(ExpandConstant('stop soundbg'), 0, 0, 0);
      MusicPlayback := false;
    end;
    // Close the MCI device
    mciSendString(ExpandConstant('close all'), 0, 0, 0);
  end;
end;


procedure CurPageChanged(CurPageID: Integer);
var
  AdditionalTasks : String;
begin
  if CurPageID = wpReady then
  begin 
    Log('Initializing Ready Page.');

    Wizardform.ReadyMemo.Font.Name := 'Consolas';

    // CodeDependencies.iss adds the additional tasks to the ReadyMemo before this code executes,
    //   so make a copy of the current text, then clear the lines.
    AdditionalTasks := Wizardform.ReadyMemo.Text;
    Wizardform.ReadyMemo.Lines.Clear();

    // Let's add our custom lines
    Wizardform.ReadyMemo.Lines.Add('');
    Wizardform.ReadyMemo.Lines.Add('Components to install:');
    Wizardform.ReadyMemo.Lines.Add('      Special K                           v {#SpecialKVersion}');
    Wizardform.ReadyMemo.Lines.Add('      Special K Injection Frontend (SKIF) v {#SKIFVersion}');
    Wizardform.ReadyMemo.Lines.Add('');
    Wizardform.ReadyMemo.Lines.Add('Destination location:');
    Wizardform.ReadyMemo.Lines.Add(ExpandConstant('      {app}'));
    Wizardform.ReadyMemo.Lines.Add('');
    Wizardform.ReadyMemo.Lines.Add('Shortcuts:');
    Wizardform.ReadyMemo.Lines.Add('      Desktop');
    Wizardform.ReadyMemo.Lines.Add('      Start menu');
    Wizardform.ReadyMemo.Lines.Add('');

    // And finally if there is any additional tasks from CodeDependencies.iss, add them back.
    Wizardform.ReadyMemo.Lines.Add(AdditionalTasks); 

    Wizardform.ReadyMemo.Show;
  end;
end;                  


function IsGlobalInjectorOrSKIFRunning(): Boolean;
var
  WbemObjectSet : Variant;
    
begin
  Result := false;

  try
    WbemObjectSet := WbemServices.ExecQuery('SELECT Name FROM Win32_Process WHERE (Name = "SKIFsvc.exe" OR Name = "SKIF.exe" OR Name = "rundll32.exe") AND (CommandLine LIKE "%SpecialK%" OR ExecutablePath LIKE "%SpecialK%")');

    if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then      
      Result := true;

  except
    // Surpresses exception when an issue prevents proper lookup
  end;
end;


function IsSKIFRunning(): Boolean;
var
  WbemObjectSet : Variant;
    
begin
  Result := false;

  try
    WbemObjectSet := WbemServices.ExecQuery('SELECT Name FROM Win32_Process WHERE (Name = "SKIF.exe")');

    if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then      
      Result := true;

  except
    // Surpresses exception when an issue prevents proper lookup
  end;
end;

function StopSKIF(): Integer;
begin
  try
    Exec('taskkill.exe', '/F /IM SKIF.exe', '', SW_HIDE, ewNoWait, Result);
  except
    // Surpresses exception when an issue prevents proper lookup
  end;
end;


function IsOneDriveRunning(): Boolean;
var
  WbemObjectSet : Variant;
    
begin
  Result := false;

  try
    WbemObjectSet := WbemServices.ExecQuery('SELECT Name FROM Win32_Process WHERE (Name = "OneDrive.exe")');

    if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
      Result := true;

  except
    // Surpresses exception when an issue prevents proper lookup
  end;
end;

function StopOneDrive(): Integer;
begin
  try
    Exec('taskkill.exe', '/F /IM OneDrive.exe', '', SW_HIDE, ewNoWait, Result);
    OneDriveStopped := True;
  except
    // Surpresses exception when an issue prevents proper lookup
  end;
end;


function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  WasVisible       : Boolean;
  ResultCode       : Integer;
  AppInitDLLs32    : String;
  AppInitDLLs32Pos : Integer;
  AppInitDLLs64    : String;
  AppInitDLLs64Pos : Integer;

begin 
  Log('Preparing Install.');

  WasVisible   := WizardForm.PreparingLabel.Visible;
  Result       := '';
  ResultCode   := 0;

  try 
    WbemLocator   := CreateOleObject('WbemScripting.SWbemLocator');
    WbemServices  := WbemLocator.ConnectServer('localhost', 'root\CIMV2');

    WizardForm.PreparingLabel.Visible := True;
    WizardForm.PreparingLabel.Caption := '';
    Wizardform.NextButton.Visible := False;
    Wizardform.NextButton.Enabled := False;
    Wizardform.BackButton.Visible := False;
    Wizardform.BackButton.Enabled := False;

    // Determine if OneDrive is running and if so prompt user about closing it

    if (Pos('OneDrive', ExpandConstant('{app}')) > 0) and (IsOneDriveRunning()) then
    begin 
      WizardForm.PreparingLabel.Caption := 'Prompting user about OneDrive...';

      // If installer is running silently, assume Yes
      if WizardSilent() then
      begin
        StopOneDrive();
      end
      else
      begin
        case MsgBox('OneDrive might conflict with the installation. Do you want the installer to close OneDrive? It will restart after the installation have completed.', mbConfirmation, MB_YESNOCANCEL) of
          IDYES:
            StopOneDrive();
          IDCANCEL:
            Result := 'User cancelled the installation.';
        end;
      end;
    end;

    // Continue if the user didn't cancel the installer

    if (Result = '') then
    begin

      if not WizardSilent() then
      begin
        // Running PowerShell script to check if user is a member of the local 'Performance Log Users' group
        WizardForm.PreparingLabel.Caption := 'Checking membership in the local ''Performance Log Users'' group...';
        Log('Checking membership in the local ''Performance Log Users'' group.');

        ExtractTemporaryFile('Add-PerformanceLogMember.ps1');
        ShellExec('Open', 'powershell', '-NonInteractive -NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File "' + ExpandConstant('{tmp}') + '\Add-PerformanceLogMember.ps1"', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);      

        Sleep(500);

        if ResultCode <> 0 then
          Log('Failed to run PowerShell session : ' + IntToStr(ResultCode) + ', ' + SysErrorMessage(ResultCode));

        ResultCode   := 0;
      end;

      // Clean up any remains from super duper old legacy global injection method
      WizardForm.PreparingLabel.Caption := 'Determining if a legacy injection method is present on the system...';
      Log('Checking for legacy AppInit_DLLs method.');

      AppInitDLLs32    := '';
      AppInitDLLs64    := '';
      AppInitDLLs32Pos := 0;
      AppInitDLLs64Pos := 0;

      RegQueryStringValue  (HKLM32, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows', 'AppInit_DLLs', AppInitDLLs32);
      if IsWin64 then
      begin
        RegQueryStringValue(HKLM64, 'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows', 'AppInit_DLLs', AppInitDLLs64);
      end;
      AppInitDLLs32Pos := Pos('SpecialK', AppInitDLLs32);
      AppInitDLLs64Pos := Pos('SpecialK', AppInitDLLs64);
      
      if (AppInitDLLs32Pos > 0) or (AppInitDLLs64Pos > 0) then
      begin
        WizardForm.PreparingLabel.Caption := 'Running cleanup commands in an elevated process...';
        Log('AppInitDLLs 32-bit : ' + AppInitDLLs32);
        Log('AppInitDLLs 64-bit : ' + AppInitDLLs64);

        ExtractTemporaryFile('Unregister-AppInitDLLs.ps1');
               
        Log('Calling an elevated Powershell session to run Unregister-AppInitDLLs.ps1');
        ShellExec('RunAs', 'powershell', ExpandConstant('-NoProfile -NonInteractive -WindowStyle Hidden -ExecutionPolicy Bypass -File "{tmp}\Unregister-AppInitDLLs.ps1"'), '', SW_SHOW, ewWaitUntilTerminated, ResultCode);      

        Sleep(500);

        if ResultCode <> 0 then
          Log('Failed to run elevated PowerShell session : ' + IntToStr(ResultCode) + ', ' + SysErrorMessage(ResultCode));
      end;

      
      // Stop current running global injection
      if (IsGlobalInjectorOrSKIFRunning()) and (FileExists(ExpandConstant('{app}\SKIF.exe'))) then
      begin 
        Log('Stopping Special K Injection Frontend (SKIF) and the global injection service...');
        WizardForm.PreparingLabel.Caption := 'Stopping Special K Injection Frontend (SKIF) and the global injection service...';

        if FileExists(ExpandConstant('{app}\SpecialK32.dll')) or FileExists(ExpandConstant('{app}\SpecialK64.dll')) then
          Exec(ExpandConstant('{app}\SKIF.exe'), 'Stop Quit', '', SW_HIDE, ewWaitUntilTerminated, ResultCode)
        else
          Exec(ExpandConstant('{app}\SKIF.exe'), 'Quit', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

        Sleep(500);
      end;

      
      // If SKIF is still running, force close it
      if (IsSKIFRunning()) then
      begin 
        Log('Forcefully stopping Special K Injection Frontend (SKIF).');
        WizardForm.PreparingLabel.Caption := 'Forcefully stopping Special K Injection Frontend (SKIF)...';

        StopSKIF();

        Sleep(500);
      end;


      // Remove existing DLL files, or rename them if removing fails
      if FileExists(ExpandConstant('{app}\SpecialK32.dll')) or FileExists(ExpandConstant('{app}\SpecialK64.dll')) then
      begin
        Log('Performing final preparations.');

        WizardForm.PreparingLabel.Caption := 'Performing final preparations...';

        DeleteFile(ExpandConstant('{app}\SpecialK32.old'));
        DeleteFile(ExpandConstant('{app}\SpecialK64.old'));

        if not DeleteFile(ExpandConstant('{app}\SpecialK32.dll')) then
          RenameFile(ExpandConstant('{app}\SpecialK32.dll'), ExpandConstant('{app}\SpecialK32.old'));

        if not DeleteFile(ExpandConstant('{app}\SpecialK64.dll')) then
          RenameFile(ExpandConstant('{app}\SpecialK64.dll'), ExpandConstant('{app}\SpecialK64.old'));
      end;
    
    end;

  finally
    WizardForm.PreparingLabel.Visible := WasVisible;
  end;
end;

function IsKernelDriverInstalled(): Boolean;
var
  WbemLocator   : Variant;
  WbemServices  : Variant;
  WbemObjectSet : Variant;
    
begin
  Result := false;

  try
    WbemLocator   := CreateOleObject('WbemScripting.SWbemLocator');
    WbemServices  := WbemLocator.ConnectServer('localhost', 'root\CIMV2');
    WbemObjectSet := WbemServices.ExecQuery('SELECT PathName FROM Win32_SystemDriver WHERE Name = "WinRing0_1_2_0" AND PathName LIKE "%SpecialK%"');

    if not VarIsNull(WbemObjectSet) and (WbemObjectSet.Count > 0) then
    begin       
      Result := true;
    end;
    
    WbemLocator .Release();
    WbemServices.Release();

  except
    // Surpresses exception when an issue prevents proper lookup
  end;
end;


function IsSKIFAutoStartEnabled(): Boolean;
var
  TaskService: Variant;
  Folder: Variant;
  Task: Variant;
begin
  Result := false;

  try
    TaskService := CreateOleObject('Schedule.Service');
    TaskService.Connect();
    Folder      := TaskService.GetFolder('\');
    Task        := Folder.GetTask('SK_InjectLogon');

    if not VarIsNull(Task) and (Task.Name = 'SK_InjectLogon') then        
      Result := true;
  except
    // Surpresses exception when task does not exist or another issue prevents proper lookup
  end;
end;


procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
    DefaultCaption   : String;
    ResultCode       : Integer;
    InstallFolder    : String;
    IsKernelDriver   : Boolean;
    IsSKIFAutoStart  : Boolean;
    PowerShellArgs   : String;
begin
  if CurUninstallStep = usUninstall then
  begin 
    Log('Preparing Uninstall.');

    DefaultCaption := UninstallProgressForm.StatusLabel.Caption;
    InstallFolder := ExpandConstant('{app}');

    if (FileExists(InstallFolder + '\SKIF.exe')) then
    begin 
      Log('SKIF.exe file check : detected');
      UninstallProgressForm.StatusLabel.Caption := 'Stopping SKIF and the global injection service if they are running...';
      Exec(InstallFolder + '\SKIF.exe', 'Stop Quit', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

      Sleep(500);

      if ResultCode <> 0 then
        Log('Global injection failed to stop : ' + IntToStr(ResultCode) + ', ' + SysErrorMessage(ResultCode));
    end;
    

    UninstallProgressForm.StatusLabel.Caption := 'Determining if any Special K components requires elevation to remove...';

    IsKernelDriver := IsKernelDriverInstalled();
    if IsKernelDriver then
      Log('Kernel driver check : installed');

    IsSKIFAutoStart := IsSKIFAutoStartEnabled();
    if IsSKIFAutoStart then
      Log('SKIF scheduled task : detected');

    PowerShellArgs := '';
    ResultCode := 0;

    if IsSKIFAutoStart then
      PowerShellArgs := PowerShellArgs + 'Unregister-ScheduledTask -TaskName ''SK_InjectLogon'' -Confirm:$false; Remove-Item -Path ([Environment]::GetFolderPath(''MyDocuments'') + ''\My Mods\SpecialK\Servlet\SpecialK.LogOn''); ';
    
    if IsKernelDriver then
      PowerShellArgs := PowerShellArgs + 'Stop-Service -Name ''WinRing0_1_2_0''; sc.exe delete ''WinRing0_1_2_0''; ';

    if (IsSKIFAutoStart) or (IsKernelDriver) then
    begin
      UninstallProgressForm.StatusLabel.Caption := 'Running cleanup commands in an elevated process...';
      Log('Calling an elevated Powershell session with the following commands : ' + PowerShellArgs );
      ShellExec('RunAs', 'powershell', '-NoProfile -NonInteractive -WindowStyle Hidden -Command "' + PowerShellArgs + '"', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
      
      Sleep(500);

      if ResultCode <> 0 then
        Log('Failed to run elevated PowerShell commands : ' + IntToStr(ResultCode) + ', ' + SysErrorMessage(ResultCode));
    end;

    UninstallProgressForm.StatusLabel.Caption := DefaultCaption;
  end;
end;


function RestartOneDrive: Boolean;
begin
  Result := OneDriveStopped;
end;


[InstallDelete]
Type: files;          Name: "{userprograms}\Startup\SKIM64.lnk"
Type: files;          Name: "{userprograms}\Startup\SKIF.lnk"
Type: files;          Name: "{userprograms}\Startup\SKIFsvc32.lnk"
Type: files;          Name: "{userprograms}\Startup\SKIFsvc64.lnk"
Type: files;          Name: "{app}\SpecialK32.pdb"
Type: files;          Name: "{app}\SpecialK64.pdb"
Type: files;          Name: "{app}\unins00*"
Type: files;          Name: "{app}\Servlet\unins00*"
Type: files;          Name: "{app}\Servlet\driver_install.bat"
Type: files;          Name: "{app}\Servlet\driver_uninstall.bat"
Type: files;          Name: "{app}\Servlet\disable_logon.bat"
Type: files;          Name: "{app}\Servlet\enable_logon.bat"
Type: files;          Name: "{app}\Servlet\task_eject.bat"

[Registry]
Root: HKCU; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Run"; ValueName: "Special K 32-bit Global Injection Service Host";             Flags: uninsdeletevalue
Root: HKCU; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Run"; ValueName: "Special K 64-bit Global Injection Service Host";             Flags: uninsdeletevalue
Root: HKCU; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Run"; ValueName: "Special K";                                                  Flags: uninsdeletevalue
Root: HKCU; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\SKIF.exe"; ValueType: string; ValueData: "{app}\{#SpecialKExeName}"; Flags: uninsdeletekey

[Files]
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

; NOTE: When solid compression is enabled, be sure to list your temporary files at (or near) the top of the [Files] section.
; In order to extract an arbitrary file in a solid-compressed installation, Setup must first decompress all prior files (to a temporary buffer in memory).
; This can result in a substantial delay if a number of other files are listed above the specified file in the [Files] section.

; Temporary files that are extracted as needed
Source: "{#RedistDir}\Add-PerformanceLogMember.ps1"; DestDir: {tmp};            Flags: dontcopy;              
Source: "{#RedistDir}\Unregister-AppInitDLLs.ps1";   DestDir: {tmp};            Flags: dontcopy;
Source: "{#AssetsDir}\techno_stargazev2.1loop.mp3";  DestDir: {tmp};            Flags: dontcopy;

; Main Special K files should always be overwritten
Source: "{#SourceDir}\SKIF.exe";                     DestDir: "{app}";          Flags: ignoreversion;                            Check: IsWin64;
Source: "{#SourceDir}\SKIF32.exe";                   DestDir: "{app}";          Flags: ignoreversion;  DestName: "SKIF.exe";     Check: not IsWin64;  
Source: "{#SourceDir}\SpecialK32.dll";               DestDir: "{app}";          Flags: ignoreversion;
Source: "{#SourceDir}\SpecialK32.pdb";               DestDir: "{app}";          Flags: ignoreversion skipifsourcedoesntexist;
Source: "{#SourceDir}\SpecialK64.dll";               DestDir: "{app}";          Flags: ignoreversion;                            Check: IsWin64;
Source: "{#SourceDir}\SpecialK64.pdb";               DestDir: "{app}";          Flags: ignoreversion skipifsourcedoesntexist;    Check: IsWin64;
Source: "{#SourceDir}\Servlet\SKIFsvc64.exe";        DestDir: "{app}\Servlet";  Flags: ignoreversion;                            Check: IsWin64;
Source: "{#SourceDir}\Servlet\*";                    DestDir: "{app}\Servlet";  Flags: ignoreversion;  Excludes: "SKIFsvc64.exe" 

; Remaining files should only be created if they do not exist already.
; NOTE: This line causes the files included above to be counted twice in DiskSpaceMBLabel
Source: "{#SourceDir}\*";                            DestDir: "{app}";          Flags: onlyifdoesntexist recursesubdirs createallsubdirs;  Excludes: "SKIF.exe,SKIF32.exe,\SpecialK32.dll,\SpecialK32.pdb,\SpecialK64.dll,\SpecialK64.pdb,\Servlet" 

[Dirs]
Name: "{app}\Profiles"


[Icons]
Name: "{userprograms}\{#SpecialKName}";    Filename: "{app}\{#SpecialKExeName}"
Name:  "{autodesktop}\{#SpecialKName}";    Filename: "{app}\{#SpecialKExeName}"


[Run]
; Checked by default

Filename: "{app}\{#SpecialKExeName}";               Description: "{cm:LaunchProgram,{#StringChange(SpecialKName, '&', '&&')}}"; \
  Flags: nowait postinstall

Filename: "https://wiki.special-k.info/";           Description: "Open the wiki"; \
  Flags: shellexec nowait postinstall skipifsilent

; Unchecked by default

Filename: "https://discord.com/invite/ER4EDBJPTa";  Description: "Join the Discord server"; \
  Flags: shellexec nowait postinstall skipifsilent unchecked

Filename: "https://discourse.differentk.fyi/";      Description: "Visit the forum"; \
  Flags: shellexec nowait postinstall skipifsilent unchecked

Filename: "https://www.patreon.com/Kaldaien";       Description: "Support the project on Patreon"; \
  Flags: shellexec nowait postinstall skipifsilent unchecked

; Start up OneDrive again after installation has succeeded

Filename: "{localappdata}\Microsoft\OneDrive\OneDrive.exe";   Description: "Start OneDrive";    Parameters: "/background";    \
  Flags: nowait;      Check: RestartOneDrive;

[UninstallDelete]
Type: files;          Name: "{userprograms}\Startup\SKIM64.lnk"
Type: files;          Name: "{userprograms}\Startup\SKIF.lnk"
Type: files;          Name: "{userprograms}\Startup\SKIFsvc32.lnk"
Type: files;          Name: "{userprograms}\Startup\SKIFsvc64.lnk"
Type: files;          Name: "{app}\SpecialK32.old"
Type: files;          Name: "{app}\SpecialK64.old" 
Type: filesandordirs; Name: "{app}\Drivers\Dbghelp" 
Type: filesandordirs; Name: "{app}\Drivers\WinRing0"
Type: filesandordirs; Name: "{app}\Profiles"
Type: filesandordirs; Name: "{app}\Global"
Type: filesandordirs; Name: "{app}\CEGUI"
Type: filesandordirs; Name: "{app}\Drivers"
Type: filesandordirs; Name: "{app}\PlugIns"
Type: filesandordirs; Name: "{app}\Fonts"
Type: filesandordirs; Name: "{app}\ReadMe"
Type: filesandordirs; Name: "{app}\Servlet"
Type: filesandordirs; Name: "{app}\Version"
Type: filesandordirs; Name: "{app}\imgui.ini"
Type: filesandordirs; Name: "{app}\SKIF.ini"
Type: filesandordirs; Name: "{app}\patrons.txt"
Type: dirifempty;     Name: "{app}"  
Type: dirifempty;     Name: "{userdocs}\My Mods"

